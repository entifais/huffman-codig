* huffman codig

** data structres

*** heap of min values

python have native library for heap

*** vector with position of  characters
and frecuencies like:

|i| char |  ci | 100%|
|---+---+---+---|
| 1 | a |0.1  |10 |
| 2 | b | 0.2 |20 |
| 3 | c | 0.3 |30 |
| 4 | d | 0.2 |20 |
| 5 | e |0.1  |10 |
| 6 | f |0.05 | 5 |
| 7 | g |0.05 | 5 |

*** explain

make pop to heap and make new binary tree with sum of probabilites

root = 100%

nodes = sum of probability of sons

leaft characters proability

may be good idea create tree as vector

#+begin_src

(1,100%,a+b+c+d+e+f+g)
      /             \
(2,60%,a+b+c)      (3,40%,f+g+e+d)
   |      \                |       \
   |     (4,30%,a+b)  (5,20%,f+g+e)(6,d,20%)
   |       /     \           |    \
(7,3,30%,c) (8,a,10%) (9,b,20%)  (10,f,5%) (11,g,5%)

#+end_src

(remeber null leafts)

the index in binary is the route for decoding
